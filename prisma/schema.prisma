// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id       Int               @id @default(autoincrement())
  name     String
  email    String            @unique
  picture  String?
  role     String            @default("student")
  headline String?
  bio      String?
  website  String?
  authored course[]          @relation("AUTHORED_BY")
  enrolled enrolled_course[]
  cart     cart[]
}

model cart {
  id       Int    @id @default(autoincrement())
  user     user   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  course   course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId Int
}

model enrolled_course {
  id       Int    @id @default(autoincrement())
  user     user   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  course   course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId Int
}

model category {
  id             Int            @id @default(autoincrement())
  name           String         @unique
  sub_categories sub_category[]
}

model sub_category {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  category   category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId Int
  course     course[]
}

model course {
  id            Int                       @id @default(autoincrement())
  createdAt     DateTime                  @default(now())
  updatedAt     DateTime                  @default(now())
  title         String
  slug          String                    @unique
  language      String                    @default("en")
  author        user                      @relation("AUTHORED_BY", fields: [authorId], references: [id])
  authorId      Int
  enrolled      enrolled_course[]
  subCategory   sub_category              @relation(fields: [subCategoryId], references: [id])
  subCategoryId Int
  inCart        cart[]
  isDraft       Boolean                   @default(true)
  brief         String?
  description   String?
  image         String?
  preview       String?
  requirements  String?
  price         Int?
  whatYouLearn  course_what_you_learn[]
  content       course_content_sections[]
}

model course_what_you_learn {
  id             Int    @id @default(autoincrement())
  course         course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId       Int
  whatYoullLearn String
}

model course_content_sections {
  id           Int                      @id @default(autoincrement())
  course       course                   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId     Int
  sectionTitle String
  position     Int
  lessons      course_content_lessons[]
}

model course_content_lessons {
  id          Int                     @id @default(autoincrement())
  section     course_content_sections @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  sectionId   Int
  lessonTitle String
  position    Int
  video       String?
  textContent String?
  description String?
  duration    Int?
  preview     Boolean                 @default(false)
  type        String?                 @default("video")
  quiz        quiz?
}

model quiz {
  id       Int                    @id @default(autoincrement())
  lesson   course_content_lessons @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId Int                    @unique
  question quiz_question[]
}

model quiz_question {
  id                   Int           @id @default(autoincrement())
  quiz                 quiz          @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId               Int
  question             String
  position             Int
  commentOnWrongAnswer String?
  answer               quiz_answer[]
}

model quiz_answer {
  id         Int           @id @default(autoincrement())
  question   quiz_question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId Int
  answer     String
  isCorrect  Boolean       @default(false)
}
